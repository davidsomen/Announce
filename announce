#!/usr/bin/env ruby

require 'envyable'
require 'aws-sdk-polly'
require 'optparse'

env_path = "#{ __dir__ }/env.yml"
Envyable.load(env_path)

options = {}
options[:voice] = ENV["VOICE_ID"]
options[:bell] = ENV["BELL_FILE"]

temp_path = "#{ __dir__ }/.temp"
bells_path = "#{ __dir__ }/bells"
bell_path = "#{ bells_path }/#{ options[:bell] }"
speech_path = "#{ temp_path }/speech.mp3"

optparse = OptionParser.new do |p|
  p.banner = "Usage: say [options] script"
  p.on('-vVOICE', '--voice=VOICE', 'The AWS Polly voice used to generate the speech') do |l|
    options[:voice] = l
  end
  p.on('-bBELL', '--bell=BELL', 'The sound file to play before the announcement') do |b|
    options[:bell] = b
  end
  p.on('-t', '--time', 'Announce the time') do |t|
    options[:time] = t
  end
  p.on('-h', '--help', 'Display help information') do
    puts p
    exit
  end
end

optparse.parse!

if options[:time]
  hour = Time.new.strftime("%l")
  #script = "It's #{ hour } o'clock."
  script = "#{ hour }時です。"
else
  script = ARGV.join(' ')
end

puts script

polly = Aws::Polly::Client.new(
  access_key_id: ENV["ACCESS_KEY_ID"],
  secret_access_key: ENV["SECRET_ACCESS_KEY"],
  region: ENV["REGION"]
)

response = polly.synthesize_speech({
  output_format: 'mp3',
  text: script,
  voice_id: options[:voice]
})

FileUtils.mkdir_p(temp_path)

IO.copy_stream(response.audio_stream, speech_path)

fork { `mpg123 #{ bell_path } 2>/dev/null && mpg123 #{ speech_path } 2>/dev/null` }

#FileUtils.rm_rf(temp_path)
